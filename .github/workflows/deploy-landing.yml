name: Build and Deploy Landing Page & Desktop App

on:
  push:
    branches: [ main ]
    paths:
      - 'landing-page/**'
      - 'src/**'
      - 'desktop/**'
      - 'assets/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'scripts/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-desktop:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build desktop app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          DIST_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          DIST_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: pnpm dist:mac

      - name: List build artifacts
        run: |
          echo "Contents of dist-electron directory:"
          ls -la dist-electron/ || echo "dist-electron directory not found"
          echo "Looking for DMG files:"
          find . -name "*.dmg" -type f || echo "No DMG files found"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: dingo-track-dmg
          path: dist-electron/*.dmg
          retention-days: 30
        continue-on-error: true

  build-and-deploy-landing:
    runs-on: ubuntu-latest
    needs: build-desktop
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: dingo-track-dmg
          path: ./landing-page/public
        continue-on-error: true

      - name: Build icons
        run: pnpm convert-icons

      - name: Build landing page for GitHub Pages
        run: pnpm build:landing:prod

      - name: Generate build info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{\"version\":\"$VERSION\",\"buildTime\":\"$BUILD_TIME\"}" > docs/build-info.json
          cat docs/build-info.json

      - name: Setup downloads directory and copy assets
        run: |
          mkdir -p docs/downloads
          cp landing-page/public/*.dmg docs/downloads/ 2>/dev/null || echo "No DMG files found - landing page will deploy without download links"
          cp landing-page/landing-page.png docs/landing-page-screenshot.png || true
          ls -la docs/downloads/ || true
          echo "# Available Downloads" > docs/downloads/README.md
          if ls docs/downloads/*.dmg 1> /dev/null 2>&1; then
            echo "Desktop application downloads:" >> docs/downloads/README.md
            for file in docs/downloads/*.dmg; do
              if [ -f "$file" ]; then
                echo "- [$(basename "$file")](./$(basename "$file"))" >> docs/downloads/README.md
              fi
            done
          else
            echo "No downloads available yet. Check back later for the latest desktop app." >> docs/downloads/README.md
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-deploy-landing
    if: always() && needs.build-and-deploy-landing.result == 'success'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4